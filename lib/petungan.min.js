const r={BASE_JAWA:1555,BASE_GREGORIAN:1633,BASE_HIJRI:1043,INITIAL_DIFFERENCE:78,CYCLE_LENGTH:34,DIFFERENCE_DECAY:1,MIN_DIFFERENCE:1,HIJRI_OFFSET:512};function e(r,e,n){const t=Math.floor((14-e)/12),o=r+4800-t,a=e+12*t-3;return n+Math.floor((153*a+2)/5)+365*o+Math.floor(o/4)-Math.floor(o/100)+Math.floor(o/400)-32045}function n(r){const e=r+32044,n=Math.floor((4*e+3)/146097),t=e-Math.floor(146097*n/4),o=Math.floor((4*t+3)/1461),a=t-Math.floor(1461*o/4),E=Math.floor((5*a+2)/153),i=a-Math.floor((153*E+2)/5)+1,I=E+3-12*Math.floor(E/10);return{year:100*n+o-4800+Math.floor(E/10),month:I,day:i}}function t(r,e,n){return n+Math.ceil(29.5*(e-1))+354*(r-1)+Math.floor((3+11*r)/30)+1948439-1}function o(e){if("number"!=typeof e||!Number.isInteger(e))throw new Error("Invalid Javanese year: must be an integer");const{BASE_JAWA:n,INITIAL_DIFFERENCE:t,CYCLE_LENGTH:o,DIFFERENCE_DECAY:a,MIN_DIFFERENCE:E}=r;if(e===n)return r.BASE_GREGORIAN;const i=e-n;let I;if(i>=0){I=t-Math.floor(i/o)*a}else{I=t+Math.ceil(-i/o)*a}return e+Math.max(I,E)}function a(e){if("number"!=typeof e||!Number.isInteger(e))throw new Error("Invalid Gregorian year: must be an integer");if(e===r.BASE_GREGORIAN)return r.BASE_JAWA;let n=e-r.INITIAL_DIFFERENCE,t=0;for(;t<10;){const r=o(n)-e;if(0===r)return n;if(n-=r,t++,Math.abs(r)>1e3)throw new Error(`Conversion failed for Gregorian year ${e}: error too large`)}return n}function E(e){if("number"!=typeof e||!Number.isInteger(e))throw new Error("Invalid Javanese year: must be an integer");const{BASE_JAWA:o}=r;e<o&&console.warn(`Warning: Javanese year ${e} is before calendar standardization (${o}). Conversion may not be historically accurate.`);return n(t(e-r.HIJRI_OFFSET,1,1)).year}function i(o){if("number"!=typeof o||!Number.isInteger(o))throw new Error("Invalid Gregorian year: must be an integer");const a=e(o,1,1),E=function(r){const e=r-1948439+1,n=Math.floor((30*e+10646)/10631),o=t(n,1,1),a=Math.min(12,Math.ceil((r-o+1)/29.5));return{year:n,month:a,day:r-t(n,a,1)+1}}(a).year;for(let e=-2;e<=2;e++){const a=E+e;if(n(t(a,1,1)).year===o)return a+r.HIJRI_OFFSET}const i=e(o,12,31);let I=E,s=Number.POSITIVE_INFINITY;for(let r=E-3;r<=E+3;r++){const e=t(r,1,1),n=Math.max(0,Math.min(Math.abs(e-a),Math.abs(e-i)));n<s&&(s=n,I=r)}return I+r.HIJRI_OFFSET}function I(e){const n=[];let t=e,o=r.INITIAL_DIFFERENCE;for(let e=0;e<78;e++)n.push({konstan:Math.max(o,r.MIN_DIFFERENCE),tahunAwal:t,tahunAkhir:t+r.CYCLE_LENGTH-1}),o=Math.max(o-r.DIFFERENCE_DECAY,r.MIN_DIFFERENCE),t+=r.CYCLE_LENGTH;return n}function s(){return I(r.BASE_JAWA)}function c(){return I(r.BASE_GREGORIAN)}function f(e,n){try{const e=n>=1e3&&n<=3e3,t=n>=1600&&n<=4e3;let o;if(e&&!t){const e=n-r.BASE_JAWA,t=Math.floor(Math.abs(e)/r.CYCLE_LENGTH);o=e>=0?r.INITIAL_DIFFERENCE-t:r.INITIAL_DIFFERENCE+t}else{const e=n-r.BASE_GREGORIAN,t=Math.floor(Math.abs(e)/r.CYCLE_LENGTH);o=e>=0?r.INITIAL_DIFFERENCE-t:r.INITIAL_DIFFERENCE+t}o=Math.max(o,r.MIN_DIFFERENCE);const a=e?r.BASE_JAWA:r.BASE_GREGORIAN,E=n-a,i=Math.floor(Math.abs(E)/r.CYCLE_LENGTH);let I,s;return E>=0?(I=a+i*r.CYCLE_LENGTH,s=I+r.CYCLE_LENGTH-1):(s=a-i*r.CYCLE_LENGTH-1,I=s-r.CYCLE_LENGTH+1),{konstan:o,tahunAwal:I,tahunAkhir:s}}catch(r){return null}}function u(r){try{return a(r)}catch(n){console.warn(`Direct conversion failed for ${r}, falling back to legacy method:`,n.message);let t=(e=r,f(c(),e));if(!t)throw new Error(`Cannot convert Gregorian year ${r}: outside supported range`);return r-t.konstan}var e}function l(r){try{return o(r)}catch(n){console.warn(`Direct conversion failed for ${r}, falling back to legacy method:`,n.message);let t=(e=r,f(s(),e));if(!t)throw new Error(`Cannot convert Javanese year ${r}: outside supported range`);return r+t.konstan}var e}const h=r.HIJRI_OFFSET,N=r.BASE_JAWA,A=r.BASE_HIJRI;function _(r){if("number"!=typeof r||!Number.isInteger(r))throw new Error("Invalid Javanese year: must be an integer");return r<N?(console.warn(`Warning: Javanese year ${r} is before calendar standardization (${N}). Conversion may not be historically accurate.`),r):r-h}function C(r){if("number"!=typeof r||!Number.isInteger(r))throw new Error("Invalid Hijri year: must be an integer");return r<A?(console.warn(`Warning: Hijri year ${r} is before Javanese calendar correlation (${A}). Conversion may not be historically accurate.`),r):r+h}export{r as JAVANESE_CALENDAR_CONSTANTS,f as cariTahunReferensi,o as konversiJawaMasehiDirect,E as konversiJawaMasehiPrecise,a as konversiMasehiJawaDirect,i as konversiMasehiJawaPrecise,C as konversiTahunHijriyahKeTahunJawa,_ as konversiTahunJawaKeTahunHijriyah,l as konversiTahunJawaKeTahunMasehi,u as konversiTahunMasehiKeTahunJawa,s as tabelKonstantaKonversiTahunJawa,c as tabelKonstantaKonversiTahunMasehi};
